%info
L2 Traffic generator Module with latency test, one side only

This will generate UDP traffic using 1 NICs and receive it back on another NIC.

Roles : client:0 (first NIC of the server running this file) will send traffic
towards "dut" and should receive back the packets on client:1.

See tests/generic_dpdk/l2_fwd_latency.testie for example using the "dual" (bidirectional) version of this test

%config
default_role_map={dut:client,server:client}
require_tags=import,dpdk

%variables
GEN_BURST=32
GEN_FLOWS=128
GEN_LENGTH=64
LIMIT=1024000

%late_variables
NBBUF=EXPAND( $(( ($LIMIT * 2) + 8192 )) )

%script deps=fastclick sudo=true delay=2
click --dpdk -c 0x3 -- PKTGEN_CONFIG

%file PKTGEN_CONFIG
DPDKInfo($NBBUF)

define($replay_count 1)

elementclass Numberise {
    input-> Strip(14) -> check :: CheckIPHeader -> nPacket :: NumberPacket(40) -> SetIPChecksum -> Unstrip(14) -> output
}


elementclass Generator { $port, $outPort, $srcmac, $dstmac, $outSrcmac, $srcip, $dstip |
    tdOUT::ToDPDKDevice($port, BLOCKING true);

    adv1 :: FastUDPFlows(RATE 0, LIMIT $LIMIT, LENGTH $GEN_LENGTH, SRCETH $srcmac, DSTETH $dstmac, SRCIP $srcip, DSTIP $dstip, FLOWS $GEN_FLOWS, FLOWSIZE $GEN_BURST)
    -> MarkMACHeader
	-> Numberise
    -> EnsureDPDKBuffer
    -> replay :: ReplayUnqueue(STOP 0, QUICK_CLONE true)
    -> rt :: RecordTimestamp(N $LIMIT)
    -> sndavg :: AverageCounter()
    -> tdOUT;

    StaticThreadSched(replay $port)

    fd :: FromDPDKDevice($outPort, MAC $outSrcmac, MAXTHREADS 1, VERBOSE 99)
    -> c0 :: Classifier(12/0806 20/0001,
                        12/0806 20/0002,
                        -)[2]
    -> Strip(14)
    -> tsd :: TimestampDiff(rt)
    -> Unstrip(14)
    -> avg :: AverageCounter
    -> Discard;

    c0[0] -> ARPResponder($srcip $srcmac)
          -> tdOUT;
    c0[1] -> Discard;
}

gen0 :: Generator(0, 1, ${client:0:mac}, ${dut:0:mac}, ${client:1:mac}, ${client:0:ip}, ${dut:0:ip})

DriverManager(
    pause,
    wait 5s,

    print "Launching replay",
    write gen0/avg.reset,
    write gen0/replay.stop $replay_count,
    write gen0/replay.active true,
    pause,
    print "SAVG0 $(gen0/sndavg.link_rate)",
    print "AVG0 $(gen0/avg.link_rate) $(gen0/avg.count)",
    print "RESULT-LATENCY $(gen0/tsd.average)",
    print "RESULT-TX $(gen0/sndavg.link_rate)",
    print "RESULT-THROUGHPUT $(gen0/avg.link_rate)")
