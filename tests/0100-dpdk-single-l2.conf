%info
Test throughput through two NICs using DPDK

%config
require_tags=dpdk,fastclick

#Grapg title
title=DPDK L2 FastUDPGen + Fwd test

#Axis name
varnames={L:Length,result:Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU}

acceptable=0.01
unacceptable_n_runs=3

%variables
RXCPU={0,2}
L=[64*1024]

#Use 0 and 2 to avoid NUMA node change
cpu:TXCPU={0,2}
#cpu:RXCPU={0,2}
#Default
-cpu:TXCPU=0
#-cpu:RXCPU=2

%script
click -c 0xf -n 4 -- CONFIG || click --dpdk -c 0xf -n 4 -- CONFIG

%file CONFIG
define ($N 10000000)

define ($mac0 aa:bb:cc:dd:ee:f0)
define ($mac1 aa:bb:cc:dd:ee:f1)
define ($ip0 10.19.0.1)
define ($ip1 10.19.0.2)

//fd0 :: FromDPDKDevice(0);
td0 :: ToDPDKDevice(0);
fd1 :: FromDPDKDevice(1);
td1 :: ToDPDKDevice(1);

fu0 :: FastUDPFlows(RATE 0, LIMIT $N, LENGTH $L, SRCETH $mac0, DSTETH $mac1, SRCIP $ip0, DSTIP $ip1, FLOWS 1, FLOWSIZE $N)
    -> uq :: Unqueue(32)
	-> Counter(COUNT_CALL $N finish.run)
	-> td0;
StaticThreadSched(fu0 0)
StaticThreadSched(uq $TXCPU)

fu1 :: FastUDPFlows(RATE 0, LIMIT 1, LENGTH $L, SRCETH $mac1, DSTETH $mac0, SRCIP $ip1, DSTIP $ip0, FLOWS 1, FLOWSIZE 1)
    -> Unqueue(1)
	-> td1;

fd1 -> ac :: AverageCounter
    -> Discard;
StaticThreadSched(fd1 $RXCPU)

finish :: Script(TYPE PASSIVE,
			print "RESULT $(add $(mul $(ac.byte_rate) 8) $(mul $(ac.count) 24))",
			stop);
