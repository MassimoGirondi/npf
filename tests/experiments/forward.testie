%info
4 port Router


%config
//Timeout for a single script
//timeout=30
timeout=-1

//Axis names
var_names={LENGTH:Length,result:Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU,GEN_LENGTH:Packet length,BURSTOUT:Output burst,BURSTIN:Input burst}
role_exclude={client+dut}
default_role_map={server:dut}
var_unit={result: }
udp:var_divider={result:1000000000}
graph_series_sort=-avg
graph_result_as_variable={THROUGHPUT-(.*):THROUGHPUT,LOSS-(.*):LOSS,PERF-(.*):PERF}

%variables
//Parameters for the router itself
BURSTOUT=-1
BURSTIN=32
burst:BURSTOUT=[1*256]
burst:BURSTIN=[4*256]
CPU=1
cpu:CPU=[1-8]

CHECKSUM=true
checksum:CHECKSUM={true,false}

cpufreq:CPUFREQ=1200000

//Parameters for the packet generator
udp:GEN_BURST=256
//GEN_LENGTH=[64*1500]
udp:GEN_QUICK_CLONE=1
udp:GEN_STOP=1600000
udp:GEN_FLOWS=5
udp:GEN_FLOWSIZE=20
GEN_TIME=5
INIT_TIME={5}
-udp:GEN_LENGTH=64
thoffset=-1
parallel:thoffset=0

fastregression:BURSTIN={32,256}
fastregression:BURSTOUT={32,256}
fastregression,udp:GEN_LENGTH={64,1500}


lengthonly:BURSTIN=32
lengthonly:BURSTOUT=32

FNTIN=
FNTOUT=
FNTavg:FNTIN+=-> SetTimestamp
FNTavg:FNTOUT+=
FNTnat:FNTOUT+=-> IPRewriter(pattern 139.165.0.2 1024-65535 - - 0 0)

FNTcounter:COUNTER={CounterMP,CounterRxWMP,CounterAtomic,CounterLock,CounterRW,CounterPRW,CounterRCU}

%dpdk,-nobind,udp:import@client dpdk-bind NIC=0
%dpdk,-nobind,udp:import@client dpdk-bind NIC=1
%dpdk,-nobind:import@dut dpdk-bind NIC=0
%dpdk,-nobind:import@dut dpdk-bind NIC=1
%dpdk,-nobind:import@dut dpdk-bind NIC=2
%dpdk,-nobind:import@dut dpdk-bind NIC=3
%cpufreq:import@dut cpufreq

%late_variables
GLOBAL_ELEMENTS=
TSC:GLOBAL_ELEMENTS+=TSCClock(NOWAIT true, INSTALL true);
JIFFIE:GLOBAL_ELEMENTS+=JiffieClock();
FNTcounter:FNTIN=EXPAND( -> $COUNTER(NO_RATE true) )
FNTcounter:FNTOUT=EXPAND( -> $COUNTER(NO_RATE true) )
maxthreads=-1
parallel:maxthreads=EXPAND( $CPU )
FLUSH_T=-1

%udp:import@client fastclick-udpgen-quad
%udp:script@client 0:ip=10.1.0.2 1:ip=10.2.0.2 2:ip=10.3.0.2 3:ip=10.4.0.2 sudo=true autokill=false

%-udp:script@client delay=2
/home/tom/.tilera/workspace/tester/tester --link xgbe3,xgbe4,xgbe1,xgbe2  -w 16 --dst ${dut:0:mac},${dut:1:mac},${dut:2:mac},${dut:3:mac} --send_time ${GEN_TIME}000000 --init_time ${INIT_TIME}000000 -b 60 -l $GEN_LENGTH -i 0 -s 1 -f 1 -t RES | tee results
while read line; do
    LENGTH=$(echo $line | grep RES | cut -d' ' -f2)
    if [ -n "$LENGTH" ] ; then
        echo "RESULT-THROUGHPUT-$LENGTH $(echo $line | grep RES | cut -d' ' -f11)"
        echo "RESULT-LOSS-$LENGTH $(echo $line | grep RES | cut -d' ' -f12)"
    fi
done < results
//TH=$(cat results | grep RES | cut -d' ' -f11)
//echo "RESULT-THROUGHPUT $TH"


%udp:script@dut 0:ip=10.1.0.1 1:ip=10.2.0.1 2:ip=10.3.0.1 3:ip=10.4.0.1 sudo=true autokill=false


%-click,dpdk:script@dut sudo=true
bwtest -l 0,1,2,3 -n 4 -- 0:e:0 1:e:1 2:e:2 3:e:3

%click,dpdk:script@dut sudo=true
cat CONFIG | click --dpdk -n 4 -l 0-$(( $CPU - 1 ))

%file CONFIG
define ($MTU 1500)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})
define ($i 1024)
tol :: Discard(); //ToHost normally

$GLOBAL_ELEMENTS

elementclass Input { $device,$ip,$eth |

    fd :: FromDPDKDevice($device, BURST $bin, PROMISC true, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false) ->
/*
    c0 :: Classifier(    12/0806 20/0001,
                         12/0806 20/0002,
                         12/0800,
                         -);

    // Respond to ARP Query
    c0[0] -> arpress :: ARPResponder($ip $eth);
    arpress[0] -> Print("ARP QUERY") -> [1]output;

    // Deliver ARP responses to ARP queriers as well as Linux.
    t :: Tee(2);
    c0[1] -> t;
    t[0] -> Print("Input to linux") -> [2]output;
    t[1] -> Print("Arp response received") -> [3]output;

    //Normal IP tou output 0
    c0[2] -> [0]output;

    // Unknown ethernet type numbers.
    c0[3] -> Print("Unknown ethernet") -> Discard();*/
    [0]output;
    Idle -> [1]output;
    Idle -> [2]output;
    Idle -> [3]output;

    adv :: FastUDPFlows(RATE 0, LIMIT -1, LENGTH 64, SRCETH $eth, DSTETH $eth, SRCIP $ip, DSTIP $ip, FLOWS 1, FLOWSIZE 1)
    -> MarkMACHeader
    -> RatedUnqueue(1)
    -> [0]output;

}


td0 :: ToDPDKDevice(${dut:0:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)
td1 :: ToDPDKDevice(${dut:1:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)
td2 :: ToDPDKDevice(${dut:2:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)
td3 :: ToDPDKDevice(${dut:3:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)

input0 :: Input(${dut:0:pci}, ${dut:0:ip}, ${dut:0:mac});
input1 :: Input(${dut:1:pci}, ${dut:1:ip}, ${dut:1:mac});
input2 :: Input(${dut:2:pci}, ${dut:2:ip}, ${dut:2:mac});
input3 :: Input(${dut:3:pci}, ${dut:3:ip}, ${dut:3:mac});

//arpq0 :: ARPQuerier(${dut:0:ip}, ${dut:0:mac});
//arpq1 :: ARPQuerier(${dut:1:ip}, ${dut:1:mac});
arpq0:: EtherRewrite(SRC ${dut:0:mac}, DST ${client:0:mac});
arpq1:: EtherRewrite(SRC ${dut:1:mac}, DST ${client:1:mac});
arpq2:: EtherRewrite(SRC ${dut:2:mac}, DST ${client:2:mac});
arpq3:: EtherRewrite(SRC ${dut:3:mac}, DST ${client:3:mac});

input0[1] -> td0;
input1[1] -> td1;
input2[1] -> td2;
input3[1] -> td3;

input0[2] -> tol;
input1[2] -> tol;
input2[2] -> tol;
input3[2] -> tol;

input0[3] -> Discard;
input1[3] -> Discard;
input2[3] -> Discard;
input3[3] -> Discard;

input0[0] -> arpq0 $FNTOUT -> td0;
input1[0] -> arpq1 $FNTOUT -> td1;
input2[0] -> arpq2 $FNTOUT -> td2;
input3[0] -> arpq3 $FNTOUT -> td3;

DriverManager(wait,
            read input0/fd.hw_count,
            read input1/fd.hw_count,
            read input2/fd.hw_count,
            read input3/fd.hw_count,
            read input0/fd.mac,
            read input1/fd.mac,
            read input2/fd.mac,
            read input3/fd.mac,
            read td0.count,
            read td1.count,
            read td2.count,
            read td3.count,
            );
