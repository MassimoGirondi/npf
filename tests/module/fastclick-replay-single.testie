%info
This is not a test, this is a module to be imported using "%import" to run a pktgen to compute latency of some DUT using FastClick. The traffic is read from traces and replayed in loop.

Packets are directed towards one NIC of the "server" role using one NIC of the CLIENT and expect to receive packets back on the same NIC. There is no L3 support (ARP).

Suggested usage example in your testie (omit the prefixed "//" that prevent loop import here)

//%import@client fastclick-replay-single trace=path/to.pcap NIC=0 CLIENT_NIC=0

%config
n_retry=0
n_runs=1
require_tags=import,dpdk

%variables
PKTGEN_BURST_OUT=32
PKTGEN_REPLAY_COUNT=1
NIC=0
CLIENT_NIC=0

nolinktest=0

%script sudo=true deps=fastclick
click --dpdk -c 0xf -- PKTGEN-CONFIG

%file PKTGEN-CONFIG
define($bout $PKTGEN_BURST_OUT)
define($INsrcmac ${client:$CLIENT_NIC:mac})
define($RAW_INsrcmac ${client:$CLIENT_NIC:raw_mac})

define($INdstmac ${server:$NIC:mac})
define($RAW_INdstmac ${server:$NIC:raw_mac})

define($ignore 0)
define($wait 2)
define($replay_count $PKTGEN_REPLAY_COUNT)
define($port $NIC)
define($quick true)
define($txverbose 99)
define($rxverbose 99)

define($IP0 ${client:$NIC:ip})
define($IP1 ${client:$NIC:ip})

DPDKInfo(1048576)

fdIN :: FromDump($trace, STOP false, TIMING false, END_AFTER 8)
tdIN :: ToDPDKDevice($port, BLOCKING true, BURST $bout, VERBOSE $txverbose)


replay :: ReplayUnqueue(STOP 0, QUICK_CLONE $quick, VERBOSE true, ACTIVE true)
StaticThreadSched(replay 0)

elementclass Numberise {
    input-> Strip(14) -> check :: CheckIPHeader -> nPacket :: NumberPacket(40) -> SetIPChecksum -> Unstrip(14) -> output
}

fdIN -> rwIN :: EtherRewrite($INsrcmac,$INdstmac)
  -> NIN :: Numberise
  ->  EnsureDPDKBuffer
  -> [0]replay[0]
  -> rt :: RecordTimestamp(N 1048576)
  -> avgSIN :: AverageCounter(IGNORE $ignore)
  -> tdIN

receiveIN :: FromDPDKDevice($port, VERBOSE $rxverbose, MAC $INsrcmac, PROMISC false)

elementclass Receiver { $mac, $dir |
    input ->

    c::Classifier(0/$mac,-)->

    Strip(14) ->
    CheckIPHeader ->
    chPacket :: CheckNumberPacket() ->
    Unstrip(14) ->
    output;

    c[1]
//    -> Print("Bad MAC received $dir :",MAXLENGTH -1)
    -> Discard;

    chPacket[1] -> Unstrip(14)
//    -> Print("Bad Packet number in $dir", -1)
    -> Discard;
}

elementclass ARPHandler { $ip, $mac |
    c0 :: Classifier(    12/0806 20/0001,
                            12/0806 20/0002,
                              -);

    // Respond to ARP Query
    c0[0] -> Print("ARP") -> arpress :: ARPResponder($ip $eth) -> [1]output
    c0[2] -> [0]output
}

receiveIN -> RINswitch :: Switch(2) -> RIN :: Receiver($RAW_INsrcmac,"IN")
//-> IPPrint(IN)
  -> Strip(14) -> tsd :: TimestampDiff(rt) -> Unstrip(14)
-> avgRIN :: AverageCounter(IGNORE $ignore) -> Discard;


//----------------
//Link initializer
//----------------
adv0 :: FastUDPFlows(RATE 0, LIMIT -1, LENGTH 64, SRCETH $INsrcmac, DSTETH $INsrcmac, SRCIP $IP0, DSTIP $IP1, FLOWS 1, FLOWSIZE 1)
    -> advq0 :: RatedUnqueue(1)
    -> tdIN;

//Check that it received its packet from 2 outputs and emits packets on output 0 when it's the case
linkoklock :: PathSpinlock() [0]
  -> linkok :: Script(TYPE PACKET,
            write advq0.active false,
            write adv0.active false,
            return 0
            )


RINswitch[2]
    -> Classifier(0/$RAW_INsrcmac)
    -> Print -> [0]linkoklock


//-----------------

linkok ->
link_initialized :: Script(TYPE PACKET,
    print "Link initialized !",
    write RINswitch.switch -1,
    print "IN has $(NIN/nPacket.count) packets",
    write RIN/chPacket.count $(NIN/nPacket.count),
    wait 1s,

    print "Starting replay...",
    write avgSIN.reset,
    write avgRIN.reset,
    write RINswitch.switch 0 ,
    write replay.stop $replay_count,
    write replay.active true);


RINswitch[1]->Print(LATEIN) -> Discard;

DriverManager(  pause,
                goto waitagain $(eq $nolinktest 0),
                wait 2s,
                write advq0.active false,
                write adv0.active false,
                write link_initialized.run,
                label waitagain,
                pause,
                print "Replay finished. Waiting for last packets for $wait seconds...",
                wait $wait,
                write RINswitch.switch 1,
                print "Checking if packets are still coming in..",
                wait 2s,
                print "$(RIN/chPacket.min)/$(RIN/chPacket.max)",
                print "Rate : ",
                print $(avgSIN.link_rate),
                print $(avgRIN.link_rate),
                print "Count :",
                print $(avgSIN.count),
                print $(avgRIN.count),
                print "RESULT-LATENCY $(tsd.average)",
                print "RESULT-THROUGHPUT $(avgRIN.link_rate)",
                print "Mean Delay: $(tsd.average) µs",
                print "Min Delay: $(tsd.min) µs",
                print "Max Delay: $(tsd.max) µs",
                print "Delay StdDev: $(tsd.stddev) µs",
                stop);
