%info
This is not a testie, this is a module to be imported with %import

This will generate UDP traffic using 1 NICs and receive it back on another NIC.

Roles : client:0 (first NIC of the server running this file) will send traffic
towards "dut" and should receive back the packets on client:1

%variables
GEN_BURST=32
GEN_FLOWS=128
GEN_LENGTH=64
LIMIT=1024000

%script deps=fastclick sudo=true delay=2
click --dpdk -c 0x3 -- PKTGEN_CONFIG

%file PKTGEN_CONFIG
define($IP0 10.0.0.1)
define($IP1 10.0.0.2)

elementclass Numberise {
     input-> Strip(14) -> check :: CheckIPHeader -> nPacket :: NumberPacket(40) -> SetIPChecksum -> Unstrip(14) -> output
}


elementclass Generator { $port, $outPort, $srcmac, $dstmac, $outSrcmac |
    tdOUT::ToDPDKDevice($port, BLOCKING true);

    adv1 :: FastUDPFlows(RATE 0, LIMIT $LIMIT, LENGTH $GEN_LENGTH, SRCETH $srcmac, DSTETH $dstmac, SRCIP $IP1, DSTIP $IP0, FLOWS $GEN_FLOWS, FLOWSIZE $GEN_BURST)
    -> MarkMACHeader
	-> Numberise
    -> EnsureDPDKBuffer
    -> advq1 :: ReplayUnqueue(STOP 1, QUICK_CLONE true)
	-> rt :: RecordTimestamp(N $LIMIT)
    -> sndavg :: AverageCounter()
    -> tdOUT;

    StaticThreadSched(advq1 $port)

    FromDPDKDevice($outPport, MAC $outSrcmac, MAXTHREADS 1, VERBOSE 99)
    -> Strip(14) -> tsd :: TimestampDiff(rt) -> Unstrip(14)
    -> avg :: AverageCounter
    -> Discard
}

gen0 :: Generator(0, 1, ${client:0:mac}, ${dut:0:mac}, ${client:1:mac})

DriverManager(
    wait 1s,
    write gen0/avg.reset,
    wait 4s,
    print "SAVG0 $(gen0/sndavg.link_rate)",
    print "AVG0 $(gen0/avg.link_rate) $(gen0/avg.count)",
	print "RESULT-LATENCY $(gen0/tsd.average)",
    print "RESULT $(gen0/avg.link_rate)")
