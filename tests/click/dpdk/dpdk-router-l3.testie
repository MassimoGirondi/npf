%info
Click Router w/ 2 Networks using DPDK I/O
Using FastClick as pktgen

This configuration uses 4 NICs. It has 2 roles : "client" is a pktgen with 2 NIC, one to send traffic and the other to receive it and the router itself as "dut" with 2 NIC.

NICs are supposed to be connected to a switch and bound to a DPDK compatible driver (though, we expect this to be handled by NPF in the future)

As for any DPDK application, you must be root on the node executing DPDK

%config
//Timeout for a single script
timeout=120

//Axis names
var_names={LENGTH:Length,result:Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU}
require_tags={dpdk}

%variables
//Parameters for the router itself
BURSTOUT=[1*256]
BURSTIN=[4*256]
CPU=[1*4]
CPUFREQ=1200000 //Unused

//Parameters for the packet generator
GEN_BURST=256
GEN_LENGTH=[64*1500]
GEN_QUICK_CLONE=1
GEN_STOP=1600000
GEN_FLOWS=5
GEN_FLOWSIZE=20
GEN_TIME=5

fastregression:BURSTIN={32,256}
fastregression:BURSTOUT={32,256}
fastregression:GEN_LENGTH={64,1500}

%-nobind:import@client dpdk-bind NIC={0,1}
%-nobind:import@dut dpdk-bind NIC={0,1}

%script@client delay=2 deps=fastclick 0:ip=10.120.0.100 1:ip=10.121.0.100
click -n 4 -c 0xf -- CONFIG_CLIENT || click --dpdk -n 4 -c 0xf -- CONFIG_CLIENT

%script@dut 0:ip=10.120.0.1 1:ip=10.121.0.1
//Support for the older DPDK config style of Click
mask=$(echo "obase=16; (2^$CPU) - 1" | bc)
click -n 4 -c 0x$mask -- CONFIG || click --dpdk -n 4 -c 0x$mask -- CONFIG



%file CONFIG
define ($MTU 1500)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})
define ($i 1024)
tol :: Discard(); //ToHost normally

elementclass Input { $device,$ip,$eth |

    FromDPDKDevice($device, BURST $bin, PROMISC false) ->

    c0 :: Classifier(    12/0806 20/0001,
                         12/0806 20/0002,
                         12/0800,
                         -);

    // Respond to ARP Query
    c0[0] -> arpress :: ARPResponder($ip $eth);
    arpress[0] -> Print("ARP QUERY") -> [1]output;

    // Deliver ARP responses to ARP queriers as well as Linux.
    t :: Tee(2);
    c0[1] -> t;
    t[0] -> Print("Input to linux") -> [2]output;
    t[1] -> Print("Arp response received") -> [3]output;

    //Normal IP tou output 0
    c0[2] -> [0]output;

    // Unknown ethernet type numbers.
    c0[3] -> Print() -> Discard();
}


td0 :: ToDPDKDevice(${dut:0:pci} , BURST $bout, IQUEUE $i, BLOCKING true)
td1 :: ToDPDKDevice(${dut:1:pci} , BURST $bout, IQUEUE $i, BLOCKING true)

input0 :: Input(${dut:0:pci}, ${dut:0:ip}, ${dut:0:mac});
input1 :: Input(${dut:1:pci}, ${dut:1:ip}, ${dut:1:mac});

arpq0 :: ARPQuerier(${dut:0:ip}, ${dut:0:mac});
arpq1 :: ARPQuerier(${dut:1:ip}, ${dut:1:mac});

input0[1] -> td0;
input1[1] -> td1;

input0[2] -> tol;
input1[2] -> tol;

input0[3] -> [1]arpq0;
input1[3] -> [1]arpq1;

arpq0 -> td0;
arpq1 -> td1;

// IP routing table.
rt :: LookupIPRouteMP(   ${dut:0:ip}/24 0,
                         ${dut:1:ip}/24 1);

// Hand incoming IP packets to the routing table.
// CheckIPHeader checks all the lengths and length fields
// for sanity.
ip ::
Strip(14)
-> CheckIPHeader(INTERFACES ${dut:0:ip}/24 ${dut:1:ip}/24, VERBOSE true)
-> [0]rt;

oerror :: IPPrint("ICMP Error : DF") -> [0]rt;
ttlerror :: IPPrint("ICMP Error : TTL") -> [0]rt;

input0[0] -> Paint(1) -> ip;
input1[0] -> Paint(2) -> ip;

// IP packets for this machine.
rt[0] -> output0 :: IPOutputCombo(1, ${dut:0:ip}, $MTU);
rt[1] -> output1 :: IPOutputCombo(2, ${dut:1:ip}, $MTU);

output0[3] -> ICMPError(${dut:0:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;
output1[3] -> ICMPError(${dut:1:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;

output0[4] -> ICMPError(${dut:0:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;
output1[4] -> ICMPError(${dut:1:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;

output0[2] -> ICMPError(${dut:0:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;
output1[2] -> ICMPError(${dut:1:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;

output0[1] -> ICMPError(${dut:0:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq0;
output1[1] -> ICMPError(${dut:1:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq1;

output0[0] -> arpq0;
output1[0] -> arpq1;


%file CONFIG_CLIENT
td0 :: ToDPDKDevice(${client:0:pci}, BLOCKING true)
td1 :: ToDPDKDevice(${client:1:pci}, BLOCKING true)

fd0 :: FromDPDKDevice(${client:0:pci}, PROMISC false)
fd1 :: FromDPDKDevice(${client:1:pci}, PROMISC false)

//Our main generator path
gen0:: FastUDPFlows(
        0, $GEN_BURST, $GEN_LENGTH,
        ${client:0:mac}, ${client:0:ip},
        ${dut:0:mac}, ${client:1:ip},
        $GEN_FLOWS, $GEN_FLOWSIZE)
 -> MarkMACHeader
 -> EnsureDPDKBuffer
 -> r0 :: MultiReplayUnqueue(STOP $GEN_STOP, QUICK_CLONE $GEN_QUICK_CLONE, ACTIVE false)
 -> td0;

/*****************
 * L2 "advertisement", so all switch and ARP cache know the adresses when
 *  the test start
 ****************/
arpq0 :: ARPQuerier(${client:0:ip}, ${client:0:mac})
    -> td0
arpq1 :: ARPQuerier(${client:1:ip}, ${client:1:mac})
    -> td1

adv0:: FastUDPFlows(
        0, -1, 60,
        ${client:0:mac}, ${client:0:ip},
        00:00:00:00:00:00, ${client:1:ip},
        100, 100, ACTIVE false)
 -> Strip(14)
 -> CheckIPHeader
 -> adv0_ru :: RatedUnqueue(2)
 -> arpq0;

adv1 :: FastUDPFlows(
        0, -1, 60,
        ${client:1:mac}, ${client:1:ip},
        00:00:00:00:00:00, ${client:0:ip},
        100, 100, ACTIVE false)
 -> Strip(14)
 -> CheckIPHeader
 -> adv1_ru :: RatedUnqueue(2)
 -> arpq1;

fd0
// -> Print("fd0", -1)
 -> c0 :: Classifier(12/0806 20/0001,
                     12/0806 20/0002,
                     -);
c0[2]
 -> ac0 :: AverageCounter()
 -> Discard;
c0[1]
 -> [1]arpq0;
c0[0]
 -> ARPResponder(${client:0:ip} ${client:0:mac})
 -> td0;

fd1
// -> Print("fd1", -1)
 -> c1 :: Classifier(12/0806 20/0001,
                     12/0806 20/0002,
                     -);
c1[2]
 -> ac1 :: AverageCounter()
 -> Discard;
c1[1]
 -> [1]arpq1;
c1[0]
 -> ARPResponder(${client:1:ip} ${client:1:mac})
 -> td1;


finish :: DriverManager(
            wait 0.5s,
            write adv0.active true,
            write adv1.active true,
            wait 2s,
            print "Launching test !",
            //Stop adv
            write adv0_ru.active false,
            write adv1_ru.active false,
            write r0.active true,
            write ac0.reset,
            write ac1.reset,
            wait,
            print "RESULT $(add  $(mul $(ac0.byte_rate) 8) $(mul $(ac1.byte_rate) 8) $(mul $(ac0.count) 24) $(mul $(ac1.count) 24))",  stop);
